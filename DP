                                                                 368. Largest Divisible Subset
......................................................................................................................................................................................
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 
Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique. 
BRUTE FORCE:
class Solution {
public:
    vector<int> ans;
    void solve(int i, vector<int>& nums, vector<int> temp) {
        if (i >= nums.size()) {
            if (temp.size() > ans.size())
                ans = temp;
            return;
        }
        if (temp.size() == 0 || nums[i] % temp.back() == 0) {
            temp.push_back(nums[i]);
            solve(i + 1, nums, temp);
            temp.pop_back();
        }

        solve(i + 1, nums, temp);
    }
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int> temp;
        solve(0, nums, temp);
        return ans;
    }
};
....................................................................................
OPTIMAL:
SOLUTION: SORT + LIS(VARIANT)
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> prev(n, -1);
        int maxL = 1, idx = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0&& dp[j] + 1>dp[i]) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
                if (dp[i] > maxL) {
                    maxL = dp[i];
                    idx = i;
                }
            }
        }
        vector<int> res;
        while (idx != -1) {
            res.push_back(nums[idx]);
            idx = prev[idx];
        }
        return res;
    }
};    TC:O(n^2) , SC:O(n).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                 416. Partition Equal Subset Sum
Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 
Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
solution:
0/1 knapsack
class Solution {
public:
    bool solve(int i, vector<int>& nums, int half, vector<vector<int>>& dp) {
        if (half == 0) return true;
        if (i >= nums.size() || half < 0) return false;
        if (dp[i][half] != -1) return dp[i][half];

        bool take = solve(i + 1, nums, half - nums[i], dp);
        bool notake = solve(i + 1, nums, half, dp);

        return dp[i][half] = take || notake;
    }

    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % 2 != 0) return false;
        int half = sum / 2;
        vector<vector<int>> dp(nums.size(), vector<int>(half + 1, -1));
        return solve(0, nums, half, dp);
    }
};   TC:O(n * sum/2) = O(n * sum)  because there are n*half subproblems ,SC:O(n * half+1) + O(n);
-----------------------------------------------------------------------------------------------------------------------------
